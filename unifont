#!/usr/bin/perl

use v5.36;
use experimental qw{builtin for_list};

use utf8;
use open ':std' => ':encoding(utf-8)';

=encoding utf-8

=head1 NAME

C<unifont> -- Unicode Font Scripts


=head1 SYNOPSIS

	unifont --help
	unifont [SCRIPT-OPTIONS] [INPUT-OPTIONS] [INPUT…]

=head2 Brief summary of options

	-h --help           Show help and exit.

	INPUT-OPTIONS:
	-L --list           List available SCRIPT-OPTIONS
	-F --files          Interpret INPUT… as a list of files
	-S --strict         Exit if input contains characters that are not Basic Latin.

	SCRIPT-OPTIONS:
	See the output of --list for the complete list.
	-b --bold           Bold font
	-i --italic         Italic font

=head1 DESCRIPTION

The program converts I<Basic Latin> characters into other scripts specified
by C<SCRIPT-OPTIONS>.

=head2 Input

The input is selected as follows:

=over

=item

If run without C<INPUT…> arguments, the script reads from standard input.

=item

If run with C<--files>, each C<INPUT…> argument is opened as a text file
and used as an input.

=item

Finally, if run without C<--files> option, each argument is converted
directly.

=back


=head1 OPTIONS AND ARGUMENTS

=head2 Generic options

=over

=item C<-h>, C<--help>

Show short or long help respectively, and exit.

=back

=head2 Input options

=over

=item C<-L>, C<--list>

List available conversions.

=item C<-F>, C<--files>

Do not convert C<INPUT…> strings, but open each of them as a file
and convert contents of these files.

=item C<-S>, C<--strict>

Die with errors if the input contains a character from C<Latin> block
that is not from the C<Basic Latin> script (e.g. characters with diacritics).

If not provided, the script will simply skip conversion of these characters,
but the output may look ugly.

=back

=head2 Script options

These can be found by running the script with the C<--list> option.

Some scripts can be combined; if convertors for C<--X> and C<--Y> exist
and a convertor for C<--X-Y> exists as well, then either of these two ways
can specify the convertor.

For example, C<--bold> and C<--italic> have the same effect as C<--bold-italic>.

=cut


# =============================================================================
# IO helpers
# =============================================================================

package IOBaseHelper;

sub new($class, %args) {
	return bless {
		map {; "_$_" => $args{$_} }
			keys %args
	}, $class;
}


package Source;
our @ISA = 'IOBaseHelper';

sub next_line($self) {
	...;
}


package Source::Array;
our @ISA = 'Source';

sub new($class, $array) {
	return $class->SUPER::new(array => $array);
}

sub next_line($self) {
	if (!$self->{_array}->@*) {
		return;
	}

	my $ret = join ' ', $self->{_array}->@*;
	$self->{_array} = [];
	return $ret;
}


package Source::File;
our @ISA = 'Source';

sub new($class, $handle = *STDIN) {
	return $class->SUPER::new(handle => $handle);
}

sub next_line($self) {
	my $line = readline $self->{_handle};

	if (defined $line) {
		chomp $line;
	}

	return $line;
}


package Source::Join;
our @ISA = 'Source';

sub new($class, @sources) {
	return $class->SUPER::new(sources => [ @sources ]);
}

sub next_line($self) {
	while ($self->{_sources}->@*) {
		if (defined(my $line = $self->{_sources}->[0]->next_line)) {
			return $line;
		}

		shift $self->{_sources}->@*;
	}

	undef;
}


# -----------------------------------------------------------------------------

package Output;
our @ISA = 'IOBaseHelper';

sub push_line($self, $line) {
	...;
}

# -----------------------------------------------------------------------------

package Output::File;
our @ISA = 'Output';

sub new($class, $handle = *STDOUT) {
	return $class->SUPER::new(handle => $handle);
}

sub push_line($self, $line) {
	print { $self->{_handle} } $line, "\n";
}


# =============================================================================
# Script Transformation
# =============================================================================

package ScriptConvert::Base;

use Unicode::UCD;

sub Identify($, $c) {
	return Unicode::UCD::charinfo(ord $c);
}

sub ShortOption($) {
	return undef;
}

sub LongOption($ref) {
	my $name = (split '::', builtin::blessed($ref) // $ref)[-1];
	return join '-', map { lc } ($name =~ /[A-Z][a-z]*/g);
}

sub new($class, %options) {
	return bless { %options }, $class;
}

sub accept($self, $c, $uninfo) {
	fc $uninfo->{block} eq 'basic latin'
		&& $uninfo->{category} =~ /^L/;
}

sub convert($, $, $) {
	...
}

sub map($self, $c, $uninfo = $self->Identify($c)) {
	return $c unless $self->accept($c, $uninfo);
	return $self->convert($c, $uninfo);
}


# -----------------------------------------------------------------------------

package ScriptConvert::Shift;
use parent -norequire => 'ScriptConvert::Base';

use Carp;

sub new($self, %options) {
	Carp::confess('Option "$options{base}" missing!')
		unless defined $options{base};

	$options{lc_shift} //= 26;
	return $self->SUPER::new(%options);
}

sub char_base($self, $c) {
	my $lc = $c eq lc $c ? $self->{lc_shift} : 0;
	my $base = $lc > 0 ? 'a' : 'A';
	return ($lc, $base);
}

sub convert($self, $c, $uninfo) {
	my ($offset, $base) = $self->char_base($c);
	return chr($self->{base} + $offset + ord($c) - ord($base));
}


# -----------------------------------------------------------------------------

package Script::Convert::Identity;
use parent -norequire => 'ScriptConvert::Base';

sub LongOption($) { 'id' }

sub convert($, $c, $=) {
	$c;
}


package Script::Convert::Lc;
use parent -norequire => 'ScriptConvert::Base';

sub accept($, $, $=) { 1 }

sub convert($, $c, $=) { lc $c }


package Script::Convert::Uc;
use parent -norequire => 'ScriptConvert::Base';

sub accept($, $, $=) { 1 }

sub convert($, $c, $=) { uc $c }


package Script::Convert::Fc;
use parent -norequire => 'ScriptConvert::Base';

sub accept($, $, $=) { 1 }

sub convert($, $c, $=) { fc $c }


package Script::Convert::Italic;
use parent -norequire => 'ScriptConvert::Shift';

sub ShortOption($) { 'i' };

sub new($class) {
	return $class->SUPER::new(base => 0x1d434);
}

sub convert($self, $c, $uninfo) {
	# There is a special italic character for 'h' in other Unicode block.
	return 'ℎ' if $c eq 'h';
	return $self->SUPER::convert($c, $uninfo);
}


package Script::Convert::Script;
use parent -norequire => 'ScriptConvert::Shift';

sub new($class) {
	return $class->SUPER::new(base => 0x1d49c);
}

sub convert($self, $c, $uninfo) {
	state $map = {
		map {; substr($_, 0, 1) => substr($_, 1, 1) }
			"BℬEℰFℱHℋIℐLℒMℳRℛeℯgℊoℴ" =~ /../g
	};

	return $map->{$c} // $self->SUPER::convert($c, $uninfo);
}


package Script::Convert::Fraktur;
use parent -norequire => 'ScriptConvert::Shift';

sub new($class) {
	return $class->SUPER::new(base => 0x1d504);
}

sub convert($self, $c, $uninfo) {
	state $map = {
		map {; substr($_, 0, 1) => substr($_, 1, 1) }
			"CℭHℌIℑRℜZℨ" =~ /../g
	};

	return $map->{$c} // $self->SUPER::convert($c, $uninfo);
}


package Script::Convert::BoldDoubleStruck;
use parent -norequire => 'ScriptConvert::Shift';

sub new($class) {
	return $class->SUPER::new(base => 0x1d538);
}

sub convert($self, $c, $uninfo) {
	state $map = {
		map {; substr($_, 0, 1) => substr($_, 1, 1) }
			"CℂHℍNℕPℙQℚRℝZℤ" =~ /../g
	};

	return $map->{$c} // $self->SUPER::convert($c, $uninfo);
}


package ScriptConvert::Shift;

BEGIN {
	my %SHIFTED = (
		Bold => { base => 0x1d400, option => 'b' },
		BoldFraktur => 0x1d56c,
		BoldItalic => 0x1d468,
		BoldItalicSansSerif => 0x1d63c,
		BoldSansSerif => 0x1d5d4,
		BoldScript => 0x1d4d0,
		ItalicSansSerif => 0x1d608,
		MonoSpace => { base => 0x1d68a, option => 'm' },
		SansSerif => { base => 0x1d5a0, option => 's' },
	);

	foreach my ($name, $value) (%SHIFTED) {
		my $package = "Script::Convert::${name}";
		my %args = ref $value ? $value->%* : (base => $value);

		no strict 'refs';
		my $pkg = "Script::Convert::${name}";

		if (defined (my $option = $args{option})) {
			*{"${pkg}::ShortOption"} = sub ($) { $option };
		}

		@{"${pkg}::ISA"} = qw{ScriptConvert::Shift};
		*{"${pkg}::new"} = sub ($class, %options) {
			# We cannot use ‹SUPER› here as it would look for
			# ‹ScriptConvert::Shift›'s parent namespace (where we
			# are now).
			return ScriptConvert::Shift->new(%args, %options);
		};
	}
}


# =============================================================================
# Main
# =============================================================================

package main;

use List::Util qw{max};
use Getopt::Long qw{:config bundling};
use Pod::Usage;

sub transform_char($options, $t, $char) {
	my $info = $t->Identify($char);

	# If ‹--strict› is given and the letter is not Basic Latin, complain
	# about invalid input.
	if (!$t->accept($t, $info)) {
		if ($options->{strict}) {
			my $line = $. // 'from ARGV';
			die "Character '$char' on input line $line is from block '$info->{block}'"
				. " and cannot be converted by @{[ builtin::blessed $t ]}!";
		}

		return $char;
	}

	return $t->map($char, $info);
}

sub transform($options, $t, $line) {
	return join '', map { transform_char($options, $t, $_) }
		split '', $line;
}

sub get_transformer($settings) {
	return Script::Convert::Identity->new
		if $settings->@* == 0;

	$settings = [ map { split /-/ } $settings->@* ];
	my $ns = join '', map { ucfirst } sort $settings->@*;

	no strict 'refs';
	foreach my $name (%{"Script::Convert::"}) {
		if ($name eq "${ns}::") {
			my $pkg = "Script::Convert::$ns";
			return $pkg->new;
		}
	}

	die "No module to handle [$settings->@*] (Script::Convert::$ns)";
}

sub process($source, $sink, $settings) {
	my $t = get_transformer($settings);

	while (defined(my $line = $source->next_line)) {
		$sink->push_line(transform($::OPTIONS, $t, $line));
	}
}

sub list_converters() {
	my sub _converter_info($ns, $pkg) {
		no strict 'refs';
		my $short_option = $pkg->ShortOption;
		[ $pkg->LongOption, $pkg->ShortOption, $pkg ]
	}

	map { _converter_info($_, "Script::Convert::$_") }
		map { $_ =~ s/::$//r }
		sort keys %Script::Convert::
}

sub converter_options() {
	map { join '|', grep { defined } $_->@[0, 1] }
		list_converters()
}

$::OPTIONS = {};

GetOptions($::OPTIONS, qw{
	h
	help
	files|F
	strict|S
	list|list-converters|L
}, converter_options) or pod2usage(-verbose => 1);

pod2usage(-verbose => 0, -exitval => 0)
	if $::OPTIONS->{h};
pod2usage(-verbose => 2, -exitval => 0)
	if $::OPTIONS->{help};

if ($::OPTIONS->{list}) {
	my $width = 2 + max 0, map { length $_->[0] }
		grep { defined } list_converters;

	foreach my $converter (list_converters) {
		my $lopt = $converter->[2]->LongOption;
		my $sopt = $converter->[2]->ShortOption;

		printf "%-2s  %*s  %s\n",
			defined $sopt ? "-$sopt" : "",
			-$width, "--" . $lopt,
			$converter->[2];
	}

	exit 0;
}

my ($source, $sink);
if (@ARGV && !$::OPTIONS->{files}) {
	$source = Source::Array->new([
		map { Encode::decode('utf-8', $_) }
			@ARGV
	]);
} elsif (@ARGV) {
	$source = Source::Join->new(
		map {
			open my $fh, '<:encoding(utf-8)', $_
				or die "$_: $!";
			Source::File->new($fh);
		} @ARGV
	);
} else {
	$source = Source::File->new(*STDIN);
}

$sink = Output::File->new(*STDOUT);

my @converters = map { $_->[0] }
	grep { $::OPTIONS->{$_->[0]} }
	list_converters;

process($source, $sink, \@converters);
