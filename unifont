#!/usr/bin/perl

use v5.34;

use utf8;
use strict;
use warnings;

use experimental 'signatures';

use open ':std' => ':encoding(utf-8)';

=encoding utf-8

=head1 NAME

C<unifont> -- Unicode Font Scripts

=head1 SYNOPSIS

    unifont --help
    unifont [SCRIPT-OPTIONS] [INPUT-OPTIONS] [INPUT…]

=head2 Brief summary of options

    -h --help           Show help and exit.

  INPUT-OPTIONS:
    -F --files          Interpret INPUT… as a list of files
    -S --strict         Exit if input contains Latin characters that are not Basic Latin.

  SCRIPT-OPTIONS:
    -b --bold
    -d --double-struck
    -i --italic
    -f --fractur
    -m --mono-space
    -s --sans-serif
    -c --script

=head1 DESCRIPTION

The program converts I<Basic Latin> characters into other scripts specified
by C<SCRIPT-OPTIONS>.

=head2 Input

The input is selected as follows:

=over

=item

If run without C<INPUT…> arguments, the script reads from standard input.

=item

If run with C<--files>, each C<INPUT…> argument is opened as a text file
and used as an input.

=item

Finally, if run without C<--files> option, each argument is converted
directly.

=back

=head2 Available scripts

The script allows the following combinations of C<SCRIPT-OPTIONS>:

=over

=item I<(empty)>

The script will perform no script transformation.

=item C<--bold>

=item C<--bold> C<--double-struck>

=item C<--bold> C<--fraktur>

=item C<--bold> C<--italic>

=item C<--bold> C<--sans-serif>

=item C<--bold> C<--script>

=item C<--fraktur>

=item C<--italic>

=item C<--italic> C<--sans-serif>

=item C<--mono-space>

=item C<--sans-serif>

=item C<--script>

=back

=head1 OPTIONS AND ARGUMENTS

=head2 Generic options

=over

=item C<-h>, C<--help>, C<--man>

Show short or long help respectively, and exit.

=back

=head2 Input options

=over

=item C<-F>, C<--files>

Do not convert C<INPUT…> strings, but open each of them as a file
and convert contents of these files.

=item C<-S>, C<--strict>

Die with errors if the input contains a character from C<Latin> block
that is not from the C<Basic Latin> script (e.g. characters with diacritics).

If not provided, the script will simply skip conversion of these characters,
but the output may look ugly.

=back

=head2 Script options

=over

=item C<-b>, C<--bold>

=item C<-d>, C<--double-struck>

=item C<-i>, C<--italic>

=item C<-f>, C<--fractur>

=item C<-m>, C<--mono-space>

=item C<-s>, C<--sans-serif>

=item C<-c>, C<--script>

=back

=cut

# =============================================================================
# IO helpers
# =============================================================================

package IOBaseHelper;

sub new($class, %args) {
    return bless {
        map {; "_$_" => $args{$_} }
            keys %args
    }, $class;
}

# -----------------------------------------------------------------------------

package Source;
our @ISA = 'IOBaseHelper';

sub next_line($self) {
    ...;
}

# -----------------------------------------------------------------------------

package Source::Array;
our @ISA = 'Source';

sub new($class, $array) {
    return $class->SUPER::new(array => $array);
}

sub next_line($self) {
    if (!$self->{_array}->@*) {
        return;
    }

    my $ret = join ' ', $self->{_array}->@*;
    $self->{_array} = [];
    return $ret;
}

# -----------------------------------------------------------------------------

package Source::File;
our @ISA = 'Source';

sub new($class, $handle = *STDIN) {
    return $class->SUPER::new(handle => $handle);
}

sub next_line($self) {
    my $line = readline $self->{_handle};

    if (defined $line) {
        chomp $line;
    }

    return $line;
}

# -----------------------------------------------------------------------------

package Source::Join;
our @ISA = 'Source';

sub new($class, @sources) {
    return $class->SUPER::new(sources => [ @sources ]);
}

sub next_line($self) {
    while ($self->{_sources}->@*) {
        if (defined(my $line = $self->{_sources}->[0]->next_line)) {
            return $line;
        }

        shift $self->{_sources}->@*;
    }

    undef;
}

# -----------------------------------------------------------------------------

package Output;
our @ISA = 'IOBaseHelper';

sub push_line($self, $line) {
    ...;
}

# -----------------------------------------------------------------------------

package Output::File;
our @ISA = 'Output';

sub new($class, $handle = *STDOUT) {
    return $class->SUPER::new(handle => $handle);
}

sub push_line($self, $line) {
    print { $self->{_handle} } $line, "\n";
}

# =============================================================================
# Script Transformation
# =============================================================================

package ScriptTransformer;

use Carp;
use Unicode::UCD;

sub _SimpleBase($, $preset) {
    state $offsets = {
        Bold => 0x1d400,
        BoldItalic => 0x1d468,
        SansSerif => 0x1d5a0,
        BoldSansSerif => 0x1d5d4,
        ItalicSansSerif => 0x1d608,
        BoldItalicSansSerif => 0x1d63c,
        BoldScript => 0x1d4ea,
        BoldFraktur => 0x1d586,
        MonoSpace => 0x1d68a,
    };

    return $offsets->{$preset};
}

sub build_from_options($class, %options) {
    my $preset = join '', map { ucfirst }
        map { split /_/ }
        sort keys %options;

    if ($preset eq '') {
        # Empty options, just return this instance that does
        # nothing (base is set to 0).
        return $class->new;
    }

    if (defined(my $offset = $class->_SimpleBase($preset))) {
        # This combination has no exceptions, simple base shift will do.
        return $class->new($offset);
    }

    my $module = join '::', 'ScriptTransformer', $preset;

    my $instance = eval {
        no strict 'refs';
        $module->new;
    };

    die "There is no module to handle (@{[ sort keys %options ]})"
        if $@;

    return $instance;
}

sub new($class, $base = ord('A'), $lc_offset = undef) {
    $lc_offset //= @_ == 1
        # If no arguments are provided, use offset 32 between uppercase
        # and lowercase characters.
        ? 32
        # Otherwise use offset 26 that separates uppercase and lowercase
        # characters in special scripts.
        : 26;

    return bless {
        _base => $base,
        _lc_offset => $lc_offset,
    }, $class;
}

sub convert($self, $char, $char_info = $self->Identify($char)) {
    return lc $char_info->{block} ne 'basic latin'
        ? $char
        : $self->_convert($char);
}

sub _convert($self, $char) {
    my ($offset, $base_char) = $self->base($char);
    return chr($self->{_base} + $offset + ord($char) - ord($base_char));
}

sub base($self, $char) {
    my $lc = $char eq lc $char
        ? $self->{_lc_offset} : 0;

    my $base = $lc
        ? 'a' : 'A';

    return ($lc, $base);
}

sub Identify($, $char) {
    return Unicode::UCD::charinfo(ord $char);
}

# -----------------------------------------------------------------------------

package ScriptTransformer::Italic;
our @ISA = 'ScriptTransformer';

sub new($class) {
    return $class->SUPER::new(0x1d434);
}

sub _convert($self, $char) {
    # There is script for 'h' in Unicode.
    if ($char eq 'h') {
        return 'ℎ';
    }

    return $self->SUPER::_convert($char);
}

# -----------------------------------------------------------------------------

package ScriptTransformer::Script;
our @ISA = 'ScriptTransformer';

sub new($class) {
    return $class->SUPER::new(0x1d49c);
}

sub _convert($self, $char) {
    state $map = {
        map {; substr($_, 0, 1) => substr($_, 1, 1) }
            "BℬEℰFℱHℋIℐLℒMℳRℛeℯgℊoℴ" =~ /../g
    };

    return $map->{$char} // $self->SUPER::_convert($char);
}

# -----------------------------------------------------------------------------

package ScriptTransformer::Fraktur;
our @ISA = 'ScriptTransformer';

sub new($class) {
    return $class->SUPER::new(0x1d504);
}

sub _convert($self, $char) {
    state $map = {
        map {; substr($_, 0, 1) => substr($_, 1, 1) }
            "CℭHℌIℑRℜZℨ" =~ /../g
    };

    return $map->{$char} // $self->SUPER::_convert($char);
}

# -----------------------------------------------------------------------------

package ScriptTransformer::BoldDoubleStruck;
our @ISA = 'ScriptTransformer';

sub new($class) {
    return $class->SUPER::new(0x1d538);
}

sub _convert($self, $char) {
    state $map = {
        map {; substr($_, 0, 1) => substr($_, 1, 1) }
            "CℂHℍ NℕPℙ QℚRℝZℤ" =~ /../g
    };

    return $map->{$char} // $self->SUPER::_convert($char);
}

# =============================================================================
# Main
# =============================================================================

package main;

use Getopt::Long qw(:config bundling);
use Pod::Usage;

sub transform_char($options, $t, $char) {
    my $info = $t->Identify($char);

    # Category ‹L*› is a letter. Do not convert other stuff.
    if ($info->{category} !~ /^L/) {
        return $char;
    }

    # If ‹--strict› is given and the letter is not Basic Latin,
    # complain about invalid input.
    if (lc $info->{block} ne 'basic latin') {
        if ($options->{strict}) {
            my $line = $. // 'from ARGV';
            die "Character '$char' on input line $line is from block '$info->{block}'"
                . " and cannot be converted!";
        }

        return $char;
    }

    return $t->convert($char, $info);
}

sub transform($options, $t, $line) {
    return join '', map { transform_char($options, $t, $_) }
        split '', $line;
}

sub process($options, $source, $sink) {
    my %keys = map {; $_ => 1 }
        grep { $options->{$_} }
        (qw(bold double_struck fraktur italic mono_space sans_serif script));

    my $t = ScriptTransformer->build_from_options(%keys);

    while (defined(my $line = $source->next_line)) {
        $sink->push_line(transform($options, $t, $line));
    }
}

my $options = {};

GetOptions($options, qw(
    h
    help|man
    files|F
    strict|S

    bold|b
    double_struck|double-struck|d
    italic|i
    fraktur|f
    mono_space|mono-space|m
    sans_serif|sans-serif|s
    script|c
)) or pod2usage(-verbose => 1);

if ($options->{h}) {
    pod2usage(-verbose => 0, -exitval => 0);
}

if ($options->{help}) {
    pod2usage(-verbose => 2, -exitval => 0);
}

my $source;
if (@ARGV && !$options->{files}) {
    $source = Source::Array->new([
        map { Encode::decode('utf-8', $_) }
            @ARGV
    ]);
} elsif (@ARGV) {
    $source = Source::Join->new(
        map {
            open my $fh, '<:encoding(utf-8)', $_
                or die "$_: $!";
            Source::File->new($fh);
        } @ARGV
    );
} else {
    $source = Source::File->new(*STDIN);
}

my $sink = Output::File->new(*STDOUT);

process($options, $source, $sink);
